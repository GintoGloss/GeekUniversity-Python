# 3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
# Проверить работу исключения на реальном примере. Необходимо запрашивать у пользователя данные и заполнять список.
# Класс-исключение должен контролировать типы данных элементов списка. Примечание: длина списка не фиксирована.
# Элементы запрашиваются бесконечно, пока пользователь сам не остановит работу скрипта, введя, например,
# команду “stop”. При этом скрипт завершается, сформированный список выводится на экран. Подсказка: для данного
# задания примем, что пользователь может вводить только числа и строки. При вводе пользователем очередного элемента
# необходимо реализовать проверку типа элемента и вносить его в список, только если введено число. Класс-исключение
# должен не позволить пользователю ввести текст (не число) и отобразить соответствующее сообщение. При этом работа
# скрипта не должна завершаться.


class InputCheck(Exception):

    err_text = 'В список можно добавлять только числа!'

    def __init__(self):
        pass

    @classmethod
    def try_get_float(cls, var):
        try:
            var = float(var)
        except ValueError:
            raise cls
        else:
            return var


my_list = []
while True:
    next_el = input('Введите следующий элемент списка ("stop" для завершения): ')
    if next_el == 'stop':
        break
    try:
        next_el = InputCheck.try_get_float(next_el)
    except InputCheck:
        print(InputCheck.err_text)
    else:
        my_list.append(next_el)
print(my_list)
