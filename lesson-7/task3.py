# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (add()), вычитание (sub()), умножение (mul()), деление (truediv(
# )).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и обычное (не
# целочисленное) деление клеток, соответственно. В методе деления должно осуществляться округление значения до целого
# числа. Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных
# двух клеток. Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение. Умножение. Создается общая клетка из двух. Число
# ячеек общей клетки определяется как произведение количества ячеек этих двух клеток. Деление. Создается общая клетка
# из двух. Число ячеек общей клетки определяется как целочисленное деление количества ячеек этих двух клеток. В
# классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду. Данный
# метод позволяет организовать ячейки по рядам. Метод должен возвращать строку вида **\n\n***..., где количество
# ячеек между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний ряд
# записываются все оставшиеся. Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда
# метод make_order() вернет строку: **\n\n. Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: **\n\n***.


class Cell:

    def __init__(self, count):
        self.count = int(count)

    def __add__(self, other):
        new_cell = Cell(self.count + other.count)
        return new_cell

    def __sub__(self, other):
        result = self.count - other.count
        if result > 0:
            new_cell = Cell(result)
            return new_cell
        else:
            print('разность количества ячеек двух клеток не больше нуля')
            return None

    def __mul__(self, other):
        new_cell = Cell(self.count * other.count)
        return new_cell

    def __truediv__(self, other):
        new_cell = Cell(self.count // other.count)
        return new_cell

    def make_order(self, length):
        rows = []
        count = self.count
        while count > length:
            rows.append(str.ljust('', length, '*'))
            count -= length
        rows.append(str.ljust('', count, '*'))
        return '\n'.join(rows)


cell_a = Cell(15)
cell_b = Cell(7)
cell_c = cell_a + cell_b  # count = 22
print('\n' + cell_c.make_order(5))
cell_a = cell_c / cell_b  # count = 3
print('\n' + cell_a.make_order(1))
cell_b = cell_c - cell_a  # count = 19
print('\n' + cell_b.make_order(9))
cell_c = cell_b * cell_a  # count = 57
print('\n' + cell_c.make_order(30))
cell_a = cell_b - cell_c

